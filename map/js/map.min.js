var locations; var map; var hood = "Mountain View, CA"; var markers = []; function initMap() {
    $('#title-header').append(hood); map = new google.maps.Map(document.getElementById('map'), { center: { lat: 37.409, lng: -122.081 }, scrollwheel: true, zoom: 13, disableDefaultUI: true }); function createLocations() { var locations = []; locations.push({ "address": "3070 N Shoreline Blvd", "description": "Rengstorff House", "visible": true }); locations.push({ "address": "1600 Amphitheatre Pkwy", "description": "Google", "visible": true }); locations.push({ "address": "500 Castro St", "description": "Mountain View City Hall", "visible": true }); locations.push({ "address": "615 Cuesta Dr", "description": "Cuesta Park", "visible": true }); locations.push({ "address": "2500 Grant Rd", "description": "El Camino Hospital", "visible": true }); return locations; }
    locations = createLocations(); pinPoster(locations);
}
function setMapOnAll(map) { for (var i = 0; i < locations.length; i++) { var m = getFromMarkers(locations[i].address); if (locations[i].visible === true) { markers[m].setMap(map); } } }
function clearLocs() { for (var i = 0; i < locations.length; i++) { locations[i].visible = true; } }
function clearMarkers() { setMapOnAll(null); }
function getFromAddress(address) { for (var i = 0; i < locations.length; i++) { if (address === locations[i].address) { return i; } } }
function getFromMarkers(address) { for (var i = 0; i < markers.length; i++) { if (address === markers[i].title) { return i; } } }
function createInfoConent(data) { var backgroundImg = 'https://maps.googleapis.com/maps/api/streetview?size=600x400&location=' + data + ',' + hood; var index = getFromAddress(data); var content = '<div id="infoContent">' + '<img class="bgimg" src="' + backgroundImg + '">' + '<h3 id="infoHeading" class="infoHeader">' + data + ', ' + hood + '</h3>' + '<div id="infoBody" class="infoBody">' + locations[index].description + '</div>' + '<h4>Wikipedia Link</h4>' + '<p id="wikipedia-links"></p>' + '</div>'; return content; }
function getWiki(marker) { var wikidx = getFromAddress(marker.title); $.ajax({ url: 'https://en.wikipedia.org/w/api.php?action=opensearch&search=' + locations[wikidx].description + '&format=json&callback=wikiCallback', dataType: 'jsonp', success: function (response) { var articleStr = response[1]; if (articleStr.length === 0) { $('#wikipedia-links').text("No article in wikipedia"); } else { var url = 'https://en.wikipedia.org/wiki/' + articleStr[0]; $('#wikipedia-links').append('<a href="' + url + '">' + url + '<a>'); } } }); }
function createMapMarker(placeData) { var marker = new google.maps.Marker({ map: map, position: placeData.geometry.location, animation: google.maps.Animation.DROP, title: placeData.name }); markers.push(marker); var contentString = createInfoConent(placeData.name); var infoWindow = new google.maps.InfoWindow({ content: contentString, maxWidth: 400 }); google.maps.event.addListener(marker, 'click', function () { getWiki(marker); infoWindow.open(map, marker); }); }
function callback(results, status) { if (status == google.maps.places.PlacesServiceStatus.OK) { createMapMarker(results[0]); } }
function pinPoster(locations) {
    var service = new google.maps.places.PlacesService(map); for (var place in locations) {
        if (locations[place].visible === true) { var request = { query: locations[place].address + hood }; }
        service.textSearch(request, callback);
    }
}
initMap(); var PlacesViewModel = function () {
    this.items = ko.observableArray([]); this.itemToAdd = ko.observable(""); this.init = function () { this.items.push(locations[0].address); this.items.push(locations[1].address); this.items.push(locations[2].address); this.items.push(locations[3].address); this.items.push(locations[4].address); }; this.clear = function () {
        for (var item in this.items)
            this.items.pop();
    }; this.addItem = function () {
        clearMarkers(); this.clear(); if (this.itemToAdd() != "") { for (var i = 0; i < locations.length; i++) { var pat = this.itemToAdd().toString(); var r = locations[i].address.search(new RegExp(pat, 'i')); if (r != -1) { this.items.push(locations[i].address); locations[i].visible = true; } else { locations[i].visible = false; } } } else { this.init(); clearLocs(); }
        setMapOnAll(map);
    }.bind(this); this.showInfo = function () { var p = $('#filter-box option:selected')[0].text; var m = getFromMarkers(p); var contentString = createInfoConent(p); var infoWindow = new google.maps.InfoWindow({ content: contentString, maxWidth: 400 }); infoWindow.open(map, markers[m]); getWiki(markers[m]); }; this.init();
}; ko.applyBindings(new PlacesViewModel());